Microservices Charterstics:
-----------------------
Loosely Coupled : Every service has seperate code base and repository
Independently deployble : 
Highly scalable
resilent
collberative
 
 
 Single responsible princeple
 Bounded context :


Spring Cloud TechStack
-----------------
1.Eureka server tool integration
2.Spring cloud config server
3.Spring curcuit braker(replace Hysterix)
4.Spring API Gateway(replace Zuul)
5.Spring Load Balncer(Replace ribon)
6.feign client




Microservices Archture
Monolithic and microservices diffrences
security in microservices
Transctions in microservices
12 Factor APP



Netflix Eureka
--------------
Netflix Eureka to make a kind of server which can register the microservices & discover them when required by the other microservice. 
We call it Eureka Server or Discovery server.
Every Microservice will register into the Eureka server with a service Id and Eureka server will have information(port, IP addresses etc.)
 of all the microservices running as client applications. 
 A service (Spring Boot Application in our case) annotated with @EnableEurekaServer will work as Eureka server.  
 

 
 
 API Gateway
 --------------
  --> API Gateway is the single entry & exit point of all the microservices in the application.
  
  Design Pattrens in Microservices
  Communication in microservices
  Circuit braker design pattren
  Bounded context
  Logging in microservices
  centrilised logging
  session management in microservices (State mangement)
  OAUTH
  JWT
  Event Sourcing
scalability in microservices

Saga Design Pattren 
https://www.baeldung.com/cs/saga-pattern-microservices
Domain design pattren


Kafka
---------
Default message size in Kafka

Producer Consumer Broker
Topic queue
Exception raise when message size more than limit
replicate factor in kafka
faulttolurence in replication factor


ELK Stack
-----------

  
  